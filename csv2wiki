#!/usr/bin/env python
#
# Convert a CSV file to wiki pages.  Run 'csv2wiki --help' for details.
# https://github.com/OpenTechStrategies/ots-tools/blob/master/csv2wiki
#
# Copyright (C) 2017 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# It would be simple to change the main() function to accept a different
# url via user input.
#
# TODO: add a wrapper class to take different wiki types

import csv
from mwclient import Site
from mwclient import errors
import getopt, sys
import ConfigParser

# For exception matching.
import requests

class WikiSession:
    """One CSV import session with a given user and a given wiki."""
    def __init__(self, csv_file, config_obj):
        """Log in to this session, using parameters from CONFIG_OBJ."""
        self.site_conn        = None  # will be a mwclient Site object
        self.csv_input        = None  # will be csv.reader object
        self.row_count        = None  # will be num rows not counting header
        self.wiki_url         = config_obj['wiki_url']
        self.username         = config_obj['username']
        self.password         = config_obj['password']
        self.title_tmpl       = config_obj['title_tmpl']
        self.toc_name         = config_obj['toc_name']
        self.cat_col          = int(config_obj.get('cat_col', 0))
        self.path_to_api      = config_obj.get('path_to_api')

        if self.path_to_api is None:
          self.path_to_api = "/"

        # First count the rows, so we can format row numbers properly.
        csv_fh = open(csv_file, 'rb')
        self.csv_input = csv.reader(csv_fh,
                                    delimiter=config_obj.get('delimiter', ','),
                                    quotechar=config_obj.get('quotechar', '"'))
        self.row_count = -1
        for row in self.csv_input: self.row_count += 1
        csv_fh.close()

        # Reset the reader for our callers.
        csv_fh = open(csv_file, 'rb')
        self.csv_input = csv.reader(csv_fh,
                                    delimiter=config_obj.get('delimiter', ','),
                                    quotechar=config_obj.get('quotechar', '"'))

        # Connect to the site.
        try:
            self.site_conn = Site(self.wiki_url.split("://"), path=self.path_to_api)
        except requests.exceptions.HTTPError as err: 
            sys.stderr.write("ERROR: failed to connect to wiki URL '%s'\n" % self.wiki_url)
            sys.stderr.write("       Error details:\n")
            sys.stderr.write("       ('%s')\n" % err)
            sys.exit(1)
    
        try:
            self.site_conn.login(self.username, self.password)
        except errors.LoginError as err:
            sys.stderr.write("ERROR: Unable to log in to wiki; "
                             "check that username and password are correct.\n")
            sys.stderr.write("       Error details:\n")
            sys.stderr.write("       ('%s')\n" % err)
            sys.exit(1)


def create_pages(wiki_sess):
    """Create one wiki page for each row in the CSV file corresponding
    to WikiSession WIKI_SESS.  The CSV must have a header row and at
    least one row of content."""

    toc_text = ""
    categories = []
    row_format = "{:0" + str(len(str(wiki_sess.row_count))) + "}"

    # read in csv
    is_header = True
    row_num = 0
    for row in wiki_sess.csv_input:
        title = None
        if is_header:
            # if this is the first row, save headers
            header_array = []
            for cell in row:
                header_array.append(cell)
            is_header = False
        else:
            # Looping over the cells in the row.  Name the sections
            # according to headers.
            cell_num = 0
            for cell in row:
                if cell_num == 0:
                    # For this new line, generate a mediawiki page
                    row_num_str = row_format.format(row_num)
                    page_name = wiki_sess.title_tmpl.format(row_num_str)
                    page_title = wiki_sess.title_tmpl.format(row_num_str) + ': ' + cell
                    page = wiki_sess.site_conn.pages[page_name]
                    # Add the new page to the list of pages
                    toc_text += '* [[' + page_name + '|' + page_title + ']] \n'
                    # Set the contents of each cell to their own section.
                if cell is not "":
                    # A section can only be created with some text
                    # 
                    if cell_num + 1 == wiki_sess.cat_col:
                        cell_text = '[[Category:' + cell + ']]'
                        if cell not in categories:
                            categories.append(cell)
                    else:
                        cell_text = cell
                        # TODO: it's probably bad practice to save each page
                        # many times, and it's definitely slowing down the
                        # script.
                        #
                        # What's the deal with save/edit/text?  Send
                        # just one API request per page.
                    try:
                        page.save(cell_text, section=cell_num, sectiontitle=header_array[cell_num])
                    except errors.APIError:
                        try:
                            page.save(cell_text, section='new', sectiontitle=header_array[cell_num])
                        except errors.APIError as err:
                            sys.stderr.write("ERROR: unable to write page:\n" +
                                             "'%s'" % err)
                            sys.exit(1)
                    # If anything else goes wrong, just throw the
                    # exception up to caller.
                cell_num += 1

        if row_num > 0:
            print("CREATED PAGE: \"" + page_title + "\"")
        row_num += 1
        
    # create the TOC page.
    toc_page = wiki_sess.site_conn.pages[wiki_sess.toc_name]
    toc_page.save(toc_text)
    
    # generate the category pages
    for category in categories:
        page = wiki_sess.site_conn.pages['Category:' + category]
        try:
            page.save("")
        except errors.APIError as err:
            sys.stderr.write("ERROR: unable to create category page '"
                             + category + "':\n       '" + err + "'")
            sys.exit(1)
        print("CREATED CATEGORY: \"" + category + "\"")

    return

def delete_pages(wiki_sess, pat):
    """Delete wiki pages in WIKI_SESS's wiki whose names match pattern PAT."""
    search_result = wiki_sess.site_conn.search(pat)
    for result in search_result:
        # get as a page
        page = wiki_sess.site_conn.pages[result['title']]
        # delete with extreme prejudice
        try:
            page.delete()
        except errors.APIError as err:
            sys.stderr.write("ERROR: unable to delete page:\n      '%s'" % err)
            sys.exit(1)
        print("DELETED PAGE: \"" + result['title'] + "\"")

    return

def usage(errout=False):
    """Print a message explaining how to use this script.
    Print to stdout, unless ERROUT, in which case print to stderr."""
    out = sys.stderr if errout else sys.stdout
    out.write("""Convert each entry (row) in a CSV file to a MediaWiki page.

Basic usage:

  $ csv2wiki -c CONFIG_FILE [ --delete-matching=PATTERN ] CSV_FILE

The CONFIG_FILE contains the wiki URL, login information, and various
other run-time parameters.  It is in standard .ini file format, with
the following elements:

  wiki_url:      The url of the wiki, e.g. "http://localhost/mediawiki",
                 "https://www.example.com/mwiki", etc.

  username:      User account that has write/create permission in the wiki.
                 (With --delete option, user needs page-delete permission.)

  password:      The wiki password corresponding to the username.

  toc_name:      Title for the generated Table of Contents page.

  title_tmpl:    A string into which the row number is substituted to
                 create the title of each row's page.  Substitution is
                 done at the first "{}" in the string.  For example, if
                 title_tmpl "Entry_{}", then each page will be named
                 "Entry_001", "Entry_002", etc.  The amount of left-side
                 0-padding will be determined automatically by the
                 number of rows in the CSV input.

  cat_col:       The number of the column (if any) in the CSV file that
                 should be used to create a category for that row;
                 column numbering begins at 1, not 0.  Omit this, or
                 leave the value blank, to not use categories at all.

  delimiter:     A single-char delimiter used to separate columns in
                 a CSV row.  If omitted, defaults to ','.

  quotechar:     A single-char quotechar used to wrap contents of a
                 single cell in the CSV file.  If omitted, defaults
                 to '"'.

  path_to_api:   The API path under the URL; defaults to "/".  See also
                 http://mwclient.readthedocs.io/en/master/user/connecting.html.
                 Note that on Wikipedia.org, this would be "/w/", but in
                 most non-Wikipedia instances of MediaWiki, the default
                 "/" is more likely.  So if you're using that default, 
                 you don't have to specify this at all.

Example config file
-------------------

In this example config file, the "[csv2wiki]" section name at the top
is ignored -- it could be any value; the .ini format insists on
it, but this script doesn't (currently) use it.

  [csv2wiki]
  wiki_url: http://localhost/mediawiki
  username: wikibot
  password: wikibot1
  title_tmpl: Entry_{}
  toc_name: List_of_Entries
  cat_col: 5

Page deletion support
---------------------

This script also supports batch deletion of pages, since a possible
outcome of initial runs is that you have a bunch of pages in your wiki
that turn out to be not ready.  Use the "--delete-matching PATTERN"
option to remove them.  All pages whose names match PATTERN will be 
deleted (and no pages will be created).

Typically, PATTERN will be similar to the page_title config element,
since --delete-matching is most often used to delete pages originally
created with this script.

TODO: We will probably change --delete to just re-calculate page
      titles based on the CSV input, instead of taking a PATTERN
      argument and then querying the MediaWiki API for a list of pages
      whose names match that PATTERN.  If we make this change, then
      the --delete-matching=PATTERN option will become just --delete
      with no argument.

Dependencies and Troubleshooting
--------------------------------

* You will need to install the 'mwclient' Python library.

  If you get an error that looks something like this:

    Traceback (most recent call last):
      File "./csv2wiki", line 27, in <module>
        from xmwclient import Site
    ImportError: No module named xmwclient

  then do 'pip install mwclient' and try again.

* If you run create/delete multiple times, you may need to run
  
    $ php maintenance/rebuildall.php
  
  in your MediaWiki instance to link pages to their categories properly.
  That script takes about 10 minutes to run for a wiki with <300 pages.
  
* If you get errors saving some pages, it may be an anti-spam plugin.
  
  If your MediaWiki instance has Extension:SpamBlacklist enabled,
  then you may get errors when trying to create pages that contain
  certain kinds of URLs or email addresses (namely, URLs or email
  addresses that SpamBlacklist thinks look spammy). 
  
  One solution is to just turn off Extension:SpamBlacklist entirely.
  But even if you don't have that kind of administrative access,
  you might still have enough access to *configure* the extension, 
  in which case you can whitelist everything via a catchall regexp.
  Visit one or of of these pages:
  
    https://mywiki.example.com/index.php?title=MediaWiki:Spam-whitelist
    https://mywiki.example.com/index.php?title=MediaWiki:Email-whitelist
  
  You'll see a commented-out explanation of how the whitelist works.
  Just add a line with the regular expression ".*", as in this example:
  
    # External URLs matching this list will *not* be blocked even if they would
    # have been blocked by blacklist entries.
    #
    # Syntax is as follows:
    #   * Everything from a "#" character to the end of the line is a comment
    #   * Every non-blank line is a regex fragment which will only match hosts inside URLs
    .*
  
  That will let you save a page containing any URL.  (Things work
  similarly on the Email-whitelist page).

* Run time may be slower than you expect.

  Creating 250 wiki pages takes about 5 minutes on localhost.  
  Part of the reason for this is that the script does a page save
  for every section within a page; see the TODO comment near the 
  page.save() calls in the loop over cells for more.  We may look
  into whether the 'mwclient' library offers a caching option, or
  maybe we'll create the whole page and save it once at the end.
""")

def parse_config_file(config_file):
    """
    Parse a CONFIG_FILE into configuration parameters for use in other functions.
    """
    config_obj = {}
    config = ConfigParser.ConfigParser()
    config.read(config_file)
    for section in config.sections():
        for option in config.options(section):
            config_obj[option] = config.get(section, option)

    return config_obj

def main():
    """
    By default, creates wiki pages from a supplied CSV.  Optionally,
    deletes those pages instead.

    """
    try:
        opts, args = getopt.getopt(sys.argv[1:], 
                                   'h?d:c:',
                                   ("help",
                                    "usage",
                                    "delete-matching=",
                                    "config="))
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        usage(errout=True)
        sys.exit(2)

    csv_file = None
    config_file = None
    wiki_sess = None
    delete_matching = None
    bad_opt_seen = False
    for o, a in opts:
        if o in ("-h", "-?", "--help", "--usage"):
            usage()
            sys.exit(0)
        elif o in ("-d", "--delete-matching"):
            delete_matching = a
        elif o in ("-c", "--config"):
            config_file = a
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            bad_opt_seen = True

    if bad_opt_seen:
        sys.exit(2)

    if config_file is None:
        sys.stderr.write("ERROR: missing config file; use -c to supply it\n")
        usage(errout=True)
        sys.exit(2)
    else:
        config_settings = parse_config_file(config_file)

    if len(args) == 1:
        wiki_sess = WikiSession(args[0], config_settings)
    elif len(args) < 1:
        sys.stderr.write("ERROR: missing CSV file argument\n")
        usage(errout=True)
        sys.exit(2)
    else:
        sys.stderr.write("ERROR: too many arguments\n")
        usage(errout=True)
        sys.exit(2)

    if delete_matching is not None:
        try:
            delete_pages(wiki_sess, delete_matching)
        except IndexError as err:
            sys.stderr.write("ERROR: '%s'\n" % err)
            usage(errout=True)
            sys.exit(1)
    else:
        try:
            create_pages(wiki_sess)
        except IndexError as err:
            sys.stderr.write("ERROR: '%s'\n" % err)
            usage(errout=True)
            sys.exit(1)


if __name__ == '__main__':
    main()
