#!/bin/sh

# Copyright (c) 2013, 2016 Karl Fogel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# If you did not receive a copy of the GNU General Public License
# along with this program, see <http://www.gnu.org/licenses/>.

# Show common / exclusive non-blank lines between two files.
#
# Usage: 'show-lines common|left|right file1 file2'
#
# If flag is "common", print non-blank lines common between two files.
# (Rationale: the 'comm' utility lamely requires its input files to be sorted.)
#
# If flag is "left", print non-blank lines in left file that are not in right.
#
# If flag is "right", print non-blank lines in right file that are not in left.
#
# Notes:
#
# This script doesn't scale to files with huge numbers of lines,
# because it does a separate grep for every line.  If your files are
# too big, then here's a nickel, kid -- get yourself a real script.

BEHAVIOR="${1}"
L_FILE="${2}"
R_FILE="${3}"

# Check that we were invoked with exactly two files.
for ARG in "${L_FILE}X" "${R_FILE}X"; do
  if [ ${ARG} = "X" ]; then
    echo "Usage: '${0} L_FILE R_FILE'"
    exit 0
  fi
done

if [ ${BEHAVIOR} = "right" ]; then
  while read line; do
    if [ ! "${line}X" = "X" ]; then
      if ! grep -q "${line}" ${L_FILE}; then
        echo "${line}"
      fi
    fi
  done < ${R_FILE}
else
  while read line; do
    if [ ${BEHAVIOR} = "common" ]; then
      if [ ! "${line}X" = "X" ]; then
        if grep -q "${line}" ${R_FILE}; then
          echo "${line}"
        fi
      fi
    elif [ ${BEHAVIOR} = "left" ]; then
      if [ ! "${line}X" = "X" ]; then
        if ! grep -q "${line}" ${R_FILE}; then
          echo "${line}"
        fi
      fi
    else
      echo "ERROR: invoked with unknown behavior '${BEHAVIOR}'"
      exit 1
    fi
  done < ${L_FILE}
fi
