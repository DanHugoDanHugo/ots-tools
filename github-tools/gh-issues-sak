#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# GitHub issues "Swiss Army knife": manipulate a GitHub repository's issues.
# github.com/OpenTechStrategies/ots-tools/blob/master/github-tools/gh-issues-sak
#
# Copyright (C) 2018 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Manipulate issues associated with a GitHub repository.  Usage:

  $ ./gh-issues-sak --repository OWNER/REPOS \
                    [SUBCOMMAND [OPTIONS...] | --infile INPUT_FILE]

OWNER/REPOS is something like "opentechstrategies/ots-tools".

There are two ways to specify gh-issues-sak's behavior.  One is to
give a SUBCOMMAND saying what to do; the other is to pass an input
file that lists a bunch of per-issue batch commands.

Specifying an operation with SUBCOMMAND
---------------------------------------

The only SUBCOMMAND right now is "org-summary", which lists all issues
(both open and closed) in an Org Mode format:

  * [[https://github.com/blah/blah/issues/3][3]]   (open): issue title

    body (i.e., first comment) here

  * [[https://github.com/blah/blah/issues/2][1]]   (open): some other title

    body (i.e., first comment) here

  * [[https://github.com/blah/blah/issues/1][1]] (closed): yet another title

    body (i.e., first comment) here

The "org-summary" subcommand takes no options.

Specifying batch operations with --infile INPUT_FILE
----------------------------------------------------

The '--infile INPUT_FILE' option passes a JSON-format file that gives
various batch operations to perform on a per-issue basis.  

The top level structure is a list, and each element of the list is a
dictionary.  The only required entry in that dictionary is "issue",
whose value is the issue number (an integer).  The other dictionary
entries are optional and represent operations to perform on the issue:

    [
        {
            "issue":         1729,
            "add-labels":    ["REQ-1", "HARD"],
            "remove-labels": ["REQ-5", "EASY"]
	},
        ...
    ]

List elements are processed in order from top to bottom; it's okay
(though somewhat silly) for the same issue to appear multiple times.

Labels will be created as necessary, always with a black background.
Removing a label that doesn't exist is merely a no-op, not an error.

GitHub authentication and authorization
---------------------------------------

Each time you run this script, you will be prompted for a GitHub
authorization token.  If you don't have a token, or don't know what
one is, just hit Enter and you'll be pointed to further instructions.
We might later add an option to pass the auth token in via a file, but
we won't pass it via a command line option because then it could be
leaked via 'ps' listings, shell history, etc.
"""

import sys
import getopt
import getpass
import json
import github
import github.GithubException

def main():
    subcommand = None
    owner_name = None
    repos_name = None
    infile = None
    auth_token = None

    try:
        (opts, args) = getopt.getopt(
            sys.argv[1:], "h?", 
            ["help", "repository=", "infile=",])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("h", "--help",):
            print(__doc__)
            sys.exit(0)
        elif opt in ("--repository",):
            owner_name, repos_name = optarg.split("/")
        elif opt in ("--infile",):
            if optarg == "-":
                infile = sys.stdin
            else:
                infile = open(optarg, "r")
        
    if (owner_name is None) or (repos_name is None):
        sys.stderr.write("ERROR: '--repository' option must supply "
                         "owner and repository, like this:\n")
        sys.stderr.write("\n")
        sys.stderr.write("  owner_name/repository_name\n")
        sys.stderr.write("\n")
        sys.stderr.write("For example:\n")
        sys.stderr.write("\n")
        sys.stderr.write("  solutionguidance/psm\n")
        sys.stderr.write("\n")
        sys.exit(1)

    if len(args) == 1:
        subcommand = args[0]
    elif len(args) > 1:
        sys.stderr.write("ERROR: too many subcommands given:\n"
                         "       '%s'\n" % args)
        sys.exit(1)

    if (subcommand is not None) and (infile is not None):
        sys.stderr.write("ERROR: cannot pass both subcommand and input file\n")
        sys.exit(1)
        
    if (subcommand is None) and (infile is None):
        sys.stderr.write("ERROR: either subcommand or input file required\n")
        sys.exit(1)

    auth_token = getpass.getpass("GitHub authorization token ('?' for help): ")
    if auth_token == "?" or auth_token == "":
        print("https://help.github.com/articles/"
              "creating-a-personal-access-token-for-the-command-line")
        print("has instructions for generating a GitHub API personal"
              "access token.")
        print("")
        auth_token = getpass.getpass("GitHub authorization token: ")

    g = github.Github(auth_token)

    # We're taking advantage of some lazy polymorphism here.  Either
    # "organization/repository" or "username/repository" will work,
    # even though we only advertize the former.  So far, all of the
    # methods we're invoking exist for either type of object.  If that
    # changes, we can make a wrapper object to handle method dispatch.
    try:
        owner = g.get_organization(owner_name)
    except github.UnknownObjectException as e:
        owner = g.get_user(owner_name)

    repos = owner.get_repo(repos_name)

    if subcommand is not None:
        if subcommand == "org-summary":
            # TextWrapper appears to be buggy; at least, this wrapper
            # doesn't have the effects I'd expect it to on an issue
            # body.  Leaving this here for now, but not using it.
            #
            # import textwrap
            # wrapper = textwrap.TextWrapper(initial_indent='  ',
            #                                subsequent_indent='  ',
            #                                replace_whitespace=False,
            #                                drop_whitespace=False,
            #                                break_long_words=False,
            #                                break_on_hyphens=False)
            issues = repos.get_issues(state="all")  # both open and closed
            for issue in issues:
                if issue.pull_request is None:
                    print("* [[https://github.com/%s/%s/issues/%d][%3d]] %s: %s" 
                          % (owner_name, repos_name, issue.number, issue.number,
                             "{:>8}".format("(" + issue.state + ")"), 
                             issue.title))
                    print("")
                    # The first comment is actually called the 'body',
                    # in the API.  Yes, even though the header of that
                    # comment looks exactly like the header of every
                    # other subsequent comment, and even though the
                    # header of that first comment even *says* "kfogel
                    # commented a day ago", nooooo, it's not a
                    # comment, it's a body.  Every body wants to be
                    # some body, I guess.
                    #
                    # See earlier about how we're not using textwrap right now.
                    # print("%s" % wrapper.fill(issue.body))
                    print("%s" 
                          % "\n  ".join(("\n" + issue.body).splitlines())[1:])
                    print("")

        else:
            sys.stderr.write("ERROR: unknown subcommand '%s'\n" % subcommand)
            sys.exit(1)
    else:
        commands = json.load(infile)
        for command in commands:
            issue_number = command['issue']
            labels_to_add = command.get('add-labels')
            labels_to_remove = command.get('remove-labels')
            if (labels_to_add is None) and (labels_to_remove is None):
                continue
            issue = repos.get_issue(issue_number)
            if labels_to_add is not None:
                for label_name in labels_to_add:
                    try:
                        label = repos.get_label(label_name)
                    except github.GithubException as e:
                        label = repos.create_label(label_name, "000000")
                    issue.add_to_labels(label)
            labels_found = issue.labels
            if labels_to_remove is not None:
                for label_name in labels_to_remove:
                    if label_name in [x.name for x in labels_found]:
                        label = repos.get_label(label_name)
                        issue.remove_from_labels(label)
            # We have to refetch the issue to see the above changes take
            # effect in our local object, because it turns out PyGithub
            # doesn't automatically keep local objects in sync with the
            # changes made to upstream.  If we didn't re-fetch, then when
            # we print out the issue and its labels below, we'd see the
            # labels from *before* any additions/removals done above.
            issue = repos.get_issue(issue_number)
            print("%5d %s: %s" % (issue.number,
                                  "{:>8}".format("(" + issue.state + ")"),
                                  issue.title))
            for label in issue.labels:
                print("                - label \"%s\"" % label.name)


if __name__ == '__main__':
    main()
