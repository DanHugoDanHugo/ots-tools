#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Show how lines are distributed among files.
# https://github.com/OpenTechStrategies/ots-tools/blob/master/find-lines
#
# Copyright (C) 2017 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Show how lines are distributed among files.  Usage:

  $ ./find-lines FILE1 FILE2 [FILE3 [...]]

The output looks something like this:

  Lines found in all files:
  
    "Applicant Name"
    "Executive Summary"
    "Other Information"
    "What is the intended result?"
    "How did you hear about this opportunity?"
  
  Lines found only in some files:
  
    "Please tag your submission with 1-2 keywords." is only in these:
      - FILE1
      - FILE3
  
    "Reviewer Comments" is only in these:
      - FILE2
  
    "Affiliation" is only in these:
      - FILE3
      - FILE2
"""

import sys
import getopt


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h?', ["help", "usage",])
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        usage(errout=True)
        sys.exit(2)
    for o, a in opts:
        if o in ("-h", "-?", "--help", "--usage",):
            print("%s" % __doc__)
            sys.exit(0)

    files = sys.argv[1:]

    if len(sys.argv) < 3:
        sys.stderr.write("ERROR: At least two file arguments are required.\n")
        sys.exit(1)

    # Maps lines to sub-dictionaries; each sub-dict maps filenames to True.
    all_lines = {}
    
    # Populate all_lines.
    for fname in files:
        with open(fname, 'r') as fp:
            for line in fp:
                key = line.strip()
                all_lines.setdefault(key, {})[fname] = True

    print("Lines found in all files:\n")
    for line in all_lines:
        if len(all_lines[line].keys()) == len(files):
            print('  "%s"' % line)

    print("\nLines found only in some files:\n")
    for line in all_lines:
        if len(all_lines[line].keys()) < len(files):
            print('  "%s" is only in these:' % line)
            this_line_fnames = sorted(all_lines[line].keys())
            for fname in this_line_fnames:
                print('    - %s' % fname)
            print('')
        elif len(all_lines[line].keys()) > len(files):  # "Can't happen."
            sys.stderr.write(
                "WARNING: this line says it's in more files than examined:\n")
            sys.stderr.write(
                '    "%s"\n' % line)

                
if __name__ == '__main__':
    main()
