#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# csv-scope: Print a CSV human-readably.  Run with --help for more.
#
# Copyright (c) 2018 Open Tech Strategies, LLC
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# If you did not receive a copy of the GNU General Public License
# along with this program, see <http://www.gnu.org/licenses/>.

__doc__ = """\
Print the contents of a CSV file in a human-friendly way.  Usage: 

  $ csv-scope [OPTIONS] CSV_FILE

Available options:

  -h | -? | --help | --usage      Show this help.
  -s ROW | --start ROW            Start with headers on row ROW.
  -n | --number-rows              Show row numbers.
  -w WIDTH | --wrap=WIDTH         Wrap at WIDTH (recommended: 77).
  -e ENC | --encoding=ENC         Assume CSV input in encoding ENC.

Example values for ENC: "utf-8", "latin1" or "ISO-8859-1", etc.
"""

import csv
import getopt, sys
import textwrap

class Thing():
    """Class representing one thing."""
    def __init__(self, headers, row):
        self.fields = {}
        for header, value in zip(headers, row):
            if (value != ""):
                # If two headers have the same name *and* both have
                # values in the same row, that deserves a warning.
                if self.fields.get(header) is not None:
                    sys.stderr.write(
                        "WARNING: this row has header '%s' more than once")
                self.fields[header] = value
    def aligned_str(self, fill_length=0, wrapper=None):
        """Return a pretty string representation of this row, showing
        only columns for which there are values.
        FILL_LENGTH is a number indicating the column at which values
        should start (i.e., how much padding to put between the header
        and the value); 0 means no extra padding.  If WRAPPER is not
        None, it is a Textwrapper object used to wrap the value."""
        ret = ""
        for header, value in self.fields.items():
            if value != "":
                fmt = '{0: <%d}' % (fill_length + 1)
                header = fmt.format(header + ": ")
                if wrapper is not None:
                    value = wrapper.fill(value)
                line = header + value[len(header) + 1:]
                # If we ever need quoting, use json.dumps().
                ret += "%s\n" % line
                # Try to DTRT: if the user asked for wrapping, that's
                # because the values are very long, and wrapping will
                # make them multiline.  If the values are multiline,
                # that means it becomes harder to see the separation
                # between one value and the next, as one's gaze
                # runs down the right side of the display and the
                # headers are off in peripheral vision.  Adding an
                # extra blank line between values will help.
                if wrapper is not None:
                    ret += "\n"
        return ret
    def __str__(self):
        return self.aligned_str(0)


def main():
    csv_file = None
    csv_reader = None
    encoding = 'utf-8'
    things = []
    wrapper = None
    wrap_width = None
    header_start_row = 1
    number_rows = False   # Flag for whether or not to print row_number
    row_number = 1        # Keep track, no matter what value of flag is

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h?nw:s:e:', 
                                   ["help", "usage", 
                                    "number-rows"
                                    "wrap=",
                                    "start=", 
                                    "encoding="])
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        usage(errout=True)
        sys.exit(2)

    for o, a in opts:
        if o in ("-h", "-?", "--help", "--usage",):
            print("%s" % __doc__)
            sys.exit(0)
        elif o in ("-w", "--wrap",):
            # TODO: We could have a special value that means "try to
            # discover the console width", using code something like
            # rows, cols = os.popen('stty size', 'r').read().split()
            wrap_width = int(a)
        elif o in ("-e", "--encoding",):
            encoding = a
        elif o in ("-s", "--start",):
            header_start_row = int(a)
        elif o in ("-n", "--number-rows",):
            number_rows = True
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(1)

    if len(args) == 1:
        csv_file = args[0]
    elif len(args) < 1:
        sys.stderr.write("ERROR: CSV input file required\n")
        sys.stderr.write("\n")
        sys.stderr.write("%s" % __doc__)
        sys.exit(1)
    else:
        sys.stderr.write("ERROR: too many CSV input files specified\n")
        sys.stderr.write("\n")
        sys.stderr.write("%s" % __doc__)
        sys.exit(1)

    # One one CSV file, we needed "encoding='latin1' (or the
    # equivalent 'ISO-8859-1'), to avoid errors like this:
    #
    #   Traceback (most recent call last):
    #     File "../../bin/csv-scope", line 176, in <module>
    #       main()
    #     File "../../bin/csv-scope", line 168, in main
    #       for row in csv_reader:
    #     File "/usr/lib/python3.6/codecs.py", line 321, in decode
    #       (result, consumed) = self._buffer_decode(data, self.errors, final)
    #   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xfc \
    #                        in position 2462: invalid start byte
    # 
    # User "PM 2Ring" in https://stackoverflow.com/questions/35086193/\
    # unicodedecodeerror-utf8-codec-cant-decode-byte-inside-a-dictionary
    # provided the clue.
    csv_reader = csv.reader(open(csv_file, encoding=encoding),
                            delimiter=',', quotechar='"')

    while header_start_row > 0:
        headers = next(csv_reader)
        header_start_row -= 1
        row_number += 1

    print("Headers:")
    print("")
    seen_headers = {}
    max_header_length = 0
    for header in headers:
        if header in seen_headers:
            sys.stderr.write("WARNING: header \"%s\" occurs more than once\n"
                             % header)
        print("  - %s" % header)
        max_header_length = max(max_header_length, len(header))
        seen_headers[header] = True
    print("")
    print("Rows:")
    if wrap_width is not None:
        wrapper = textwrap.TextWrapper(
            width=wrap_width,
            # I think there might be a bug in textwrapper.  It makes
            # no sense to me that we get perfect 2nd-column alignment
            # in the output when we're using different numbers for
            # initial_indent vs subsequent_indent.
            initial_indent=' ' * (max_header_length + 3),
            subsequent_indent=' ' * (max_header_length + 2),
            replace_whitespace=False,
            drop_whitespace=True,
            break_long_words=False,
            break_on_hyphens=False)
    for row in csv_reader:
        thing = Thing(headers, row)
        sep = "=" * max_header_length
        if number_rows:
            num_str = "===== Row %d: " % row_number
            sep = num_str + "=" * max(5, (max_header_length - len(num_str)))
        print("%s" % sep)
        print("%s" % thing.aligned_str(max_header_length, wrapper))
        row_number += 1


if __name__ == '__main__':
    main()
